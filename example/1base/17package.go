package _base

// 单行导入并且为包修改别名
// import edu2 "edu/edu02"

// 多行导入, 一行就是一个包
import (
	// "edu/edu02"
	// 匿名导入包, 只导入包, 而不使用包内部的数据时, 可以使用匿名导入包
	// 匿名导入的包与其他方式导入的包一样都会被编译到可执行文件中
	// 主要是为了使用其内部的初始化函数
	_ "gotool/example/initexample"
)

/*

	Go 语言的源码复用是建立在包(package)基础之上的
	包(package) 是多个 Go 源码的集合, 是一种高级的代码复用方案, Go 语言为我们提供了很多内置包, 如 fmt,os,io 等

	定义包, 我们可以根据自己的需要创建自己的包.
	一个包可以简单理解为一个存放 .go 文件的文件夹. 该文件夹下面的所有 go 文件都要在第一行添加 `package 包名`, 用来声明该文件归属的包

	注:
		1. 一个文件夹下面只能由一个包, 同样一个包的文件不能在多个文件夹下.
		2. 包名可以不和文件夹的名字一样, 包名不能包含 `-` 符号
		3. 包名为 main 的包为应用程序的入口包, 编译时不包含 main 包的源代码时不会得到可执行文件
		4. 同一个包内的不同文件的可以直接调用

	init() 初始化函数
	在 Go 语言程序执行时导入包语句会自动出发包内部 init() 函数的调用.
	需要注意的是: init() 函数没有参数也没有返回值.
	init() 函数在运行时自动被调用执行, 不能在代码中主动调用它
	执行顺序:
		在全局声明之后才会执行 init(), 然后再执行 main()
		多个导入的包中都存在 init(), 是按照调用顺序倒序来执行, 如: main()->A->B->C , 其 init() 的实行顺序应该是  C->B->A->main()

	注:
		1. Go 语言中不允许导入包而不被使用
		2. Go 语言中不允许出现循环引用, 如 A 导入 B, B 又导入 A

*/

func F61() {

	// edu02.F31()

}
