package _base

import "fmt"

/*

	运算符


*/

func F031() {

	// 1. 算术运算符
	a := 10
	b := 20
	fmt.Println(a + b)
	fmt.Println(a - b)
	fmt.Println(a * b)
	fmt.Println(5 / 2)
	fmt.Println(5 % 2)
	// 自增(++) 自减(--), 在 Go 语言中是单独的语句, 并不是运算符
	a++
	fmt.Println(a)
	a--
	fmt.Println(a)

	// 2. 关系运算符
	// == != > >= < <=

	// 3. 逻辑运算符
	// && || !

	// 4. 位运算符
	// 位运算符对整数在内存中的二进制进行操作
	// & 参与运算的两数各对应的二进制相与(两位均位 1 才为 1), 二进制所有的位置都对齐才相等
	// | 参与运算的两数各对应的二进制相或(两位有一个为 1 就为 1)
	// ^ 参与运算的两数各对应的二进位相异或, 当两对应的二进位相异时, 结果为 1(两位不一样则为 1)
	// << 左移 n 位就是 乘以 2 的 n 次方(a << b , 是把 a 的各二进位全部左移 b 位, 高位丢弃, 低位补 0)
	// >> 右移 n 位就是除以 2 的 n 次方(a >> b, 是把 a 的各二进位右移 b 位)
	c := 1               // 二进制: 001
	d := 5               // 二进制: 101
	fmt.Println(c & d)   // 二进制结果: 001	十进制结果: 1
	fmt.Println(c | d)   // 二进制结果: 101	十进制结果: 5
	fmt.Println(c ^ d)   // 二进制结果: 100	十进制结果: 4
	fmt.Println(1 << 2)  // 1 的二进制也是 1, 向左移动两位得到 100, 100的十进制为 4, 实际等效于 1 乘以 2 的 2 次方
	fmt.Println(3 << 4)  // 同上, 3 乘以 2 的四次方, 等于 48
	fmt.Println(4 >> 2)  // 4 的二进制为 100, 向右移动两位得到 1, 1 的十进制也是 1, 等效于 4 除以 2 的 2次方
	fmt.Println(48 >> 4) // 同上, 48 除以 2 的四次方, 等于 3

	// 赋值运算符
	// = += -= *= %= <<= >>= &= |= ^=
	e := 5
	e += 5 // a = a + 5
	fmt.Println(e)
}
