package _base

import "fmt"

/*
标识符, 字母数字下划线组成, 并且只能以字母和下划线开头
*/
/*

	关键字, 一共有 25 个
	保留字, 一共有 37 个

*/

// =================================== 变量 =====================================================

/*
	变量
	同一个作用域内不支持重复生命
*/
// 标准声明
//  变量名	变量类型
var name01 string
var age01 int
var isOk01 bool

// 批量声明变量
var (
	a01 string
	b01 int
	c01 bool
	d01 float32
)

// 声明变量同时指定初始值
//  变量名 变量类型   表达式
var name011 string = "张三"
var name012, age012 = "李四", 28 // 一次定义多个变量并指定初始值, 类型推到: 编译器自动识别变量类型
// 类型推导
var name3 = "王二"
var age3 = 18

// F011 短变量声明
// 尽可以用于函数内部使用
func F011() {
	m := "sdkfjjsd" // 创建一个变量, 然后类型推导之后进行赋值
	fmt.Println(m)
}

// F012 匿名变量
// 匿名变量不占用命名空间, 也不会分配内存, 所以匿名变量之间不存在重复声明
// 一般使用 _ 来获取不想使用的返回值
func F012() {
	// a,_ := abcd()
}

// =================================== 常量 =====================================================

/*
	常量, 再定义的时候必须赋值(必须初始化)
*/
const pi01 = 3.1415926
const e01 = 2.7

const (
	pi011 = 3.1415926
	e011  = 2.7
	f01   // 若常量声明某一行没有给予默认值, 那么默认它的值跟上一行是一样的
	g01
)

// iota
// iota 是 go 语言的常量计数器, 只能再常量的表达式中使用
// iota 再 const 关键字出现时将被重置为 0, const 中每新增一行常量声明将使 iota 计数(加1)一次
const (
	_    = iota // 0
	c012        // 1
	c013        // 2
	_           // 使用 _ 将 c4 跳过某一次循环
	c015        // 4
)
